"""
1. Make a class called Thing with no contents and print it. Then, create an 
object called example from this class and also print it. Are the printed values 
the same or different?
"""

class Thing:
    def example():
        pass

obj = Thing()
#obj.example()
print(obj)
print(obj.example)

"""
2. Create a new class called Thing2 and add the value 'abc' to the letters 
class attribute. Letters should be printed.
"""
class Thing2:
    letter = "abc"

th2 = Thing2()
th2.letter

"""
3. Make yet another class called, of course, Thing3. This time, assign the 
value 'xyz' to an instance (object) attribute called letters. Print letters. 
Do you need to make an object from the class to do this?
"""
class Thing3:
    def letters(self):
        word = "xyz"
        print(word)

th3 = Thing3()
th3.letters()
# we can make this work without using object like in solution for question no.2.

"""
4. Create an Element class with the instance attributes name, symbol, 
and number. Create a class object with the values 'Hydrogen,' 'H,' and 1.
""""
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

hydrogen = Element("Hydrogen", "H", 1)
print(hydrogen.name,'\n', hydrogen.symbol,'\n', hydrogen.number)

"""
5. Make a dictionary with these keys and values: 'name': 'Hydrogen', 
'symbol': 'H', 'number': 1. Then, create an object called hydrogen from 
class Element using this dictionary.
"""

eledic = {"name":"Hydrogen", "symbol":"H", "number":1}
hyd = Element(eledic["name"], eledic["symbol"], eledic["number"])
print(hyd.name,'\n', hyd.symbol,'\n', hyd.number)

"""
6. For the Element class, define a method called dump() that prints the values 
of the objectâ€™s attributes (name, symbol, and number). Create the hydrogen 
object from this new definition and use dump() to print its attributes.
"""
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number
    def dumb(self):
        print(self.name, self.symbol, self.number)

hydrogen = Element("Hydrogen", "H", 1)
hydrogen.dumb()

"""
7. Call print(hydrogen). In the definition of Element, change the name of 
method dump to __str__, create a new hydrogen object, and call print(hydrogen) 
again.
"""
print(hydrogen)
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number
    def __str__(self):
        print(self.name, self.symbol, self.number)

print(hydrogen)

"""
8. Modify Element to make the attributes name, symbol, and number private. 
Define a getter property for each to return its value.
"""
class Element:
    def __init__(self, name, symbol, number):
        self.__name = name
        self.__symbol = symbol
        self.__number = number
    def name(self):
        return self.__name
    def symbol(self):
        return self.__symbol
    def number(self):
        return self.__number

hydrogen = Element("Hydrogen", "H", 1)
print(hydrogen.name(), hydrogen.symbol(), hydrogen.number())

"""
9. Define three classes: Bear, Rabbit, and Octothorpe. For each, define only 
one method: eats(). This should return 'berries' (Bear), 'clover' (Rabbit), or 
'campers' (Octothorpe). Create one object from each and print what it eats.
"""
class Bear:
    def eats(self):
        return "berries"
    
class Rabbit:
    def eats(self):
        return "clover"

class Octothope:
    def eats(self):
        return "campers"
    
bear = Bear()
rabbit = Rabbit()
octothrope = Octothope()

print("Bear eats",bear.eats(), "\nRabbit eats",rabbit.eats(), "\nOctothrope eats",octothrope.eats())

"""
10. Define these classes: Laser, Claw, and SmartPhone. Each has only one 
method: does(). This returns 'disintegrate' (Laser), 'crush' (Claw), or 'ring' 
(SmartPhone). Then, define the class Robot that has one instance (object) of 
each of these. Define a does() method for the Robot that prints what its 
component objects do.
"""
class Laser:
    def does(self):
        return "disintegrate"
    
class Claw:
    def does(self):
        return "crush"

class SmartPhone:
    def does(self):
        return "ring"

class Robot:
    def __init__(self):
        self.laser = Laser()
        self.claw = Claw()
        self.smartphone = SmartPhone()

    def does(self):
        print("A robot's: \nLaser do", self.laser.does(), "\nClaw do", self.claw.does(), "\nSmart phone do", self.smartphone.does())

robo = Robot()
print(robo.does())

# We can solve this problem using Nested class as below:

class Robot:
    class Laser:
        def does(self):
            return "disintegrate"
    
    class Claw:
        def does(self):
            return "crush"

    class SmartPhone:
        def does(self):
            return "ring"

lr = Laser()
cw = Claw()
pho = SmartPhone()
print("A robot's: \nLaser do", lr.does(), "\nClaw do", cw.does(), "\nSmart phone do", pho.does())
